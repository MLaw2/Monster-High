# Define hotkeys for viewing plot points. 
HotKey m "Show plot point menu" [ShowPlotPointMenu].
HotKey e "Show six random events" [Events].

# hotkey so I don't have to put Startup in every time
HotKey s "Initialize fluents and state retention" [Startup].

# Entry point for execute 6 random events
[main]
Events: [InitializeFluents] [Event] [Event] [Event] [Event] [Event] [Event]

# Entry point for executing a single random event
[main]
SingleEvent: [InitializeFluents] [Event]

Event: [NewLine] [ClearContext] [SelectAndExecute] [Paragraph]

# SelectAndExecute
# Select a random plot point available in the current state and execute it. 
SelectAndExecute:
    [FindUnique ?e [PlotPoint ?e] ?eventList] 
    [RandomElement ?eventList ?event]
    [PlotPoint ?event] 
    [ExecutePlotPoint ?event]

[end]

# ExecuteSelectedPlotPoint
# Given a plot point, execute it, and show the plot point menu for the new state.
ExecuteSelectedPlotPoint ?plotPoint:
    [ClearContext]
    [ExecutePlotPoint ?plotPoint]
    [Paragraph]
    [WritePlotPointMenu]
[end]

# WritePlotPoint
# Given a plot point, write it as a link. If the link is clicked, runs the task
# ExecuteSelectedPlotPoint. 
WritePlotPoint ?plotPoint:
    [Link [ExecuteSelectedPlotPoint ?plotPoint]]
    [Write ?plotPoint]
    [EndLink]
    [NewLine]
[end]


# ShowPlotPointMenu
# Entry point for interactively selecting and executing available plot points.
# Resets the state to the initial story state, and writes the plot point menu. 
[main]
ShowPlotPointMenu:
    [EnvironmentOption discardState]
    [EnvironmentOption retainState]
    [InitializeFluents]
    [WritePlotPointMenu]
[end]

# WritePlotPointMenu
# For each of the plot points applicable in the current story state, adds them to a menu.
[main]
WritePlotPointMenu: 
    [ForEach [PlotPoint ?event] [WritePlotPoint ?event]]
[end] 

###
### What you need to write
###

[main]
[randomly]
predicate PlotPoint ?event.
# ?event is a possible plot point in a Monster High episode given
# the characters and their relationships.  Fill in methods for this,
# below.

PlotPoint [confess_love ?a ?b]:
    [CrushOn ?a ?b]
    [Not [Dating ?a ?b]]
[end]

PlotPoint [start_dating ?a ?b]:
    [Knows ?a [CrushOn ?b ?a]]
    [MutualAttraction ?a ?b]
    [Not [Dating ?a ?b]]
    [Not [StarCrossedLovers ?a ?aType ?b ?bType]]
[end]

PlotPoint [start_dating ?char1 ?char2]:
    [Knows ?char1 [CrushOn ?char2 ?char1]]
    [MutualAttraction ?char1 ?char2]
    [Not [Dating ?char1 ?char2]]
    [StarCrossedLovers ?char1 ?char1Type ?char2 ?char2Type]
    [Confident ?char1]
[end]

PlotPoint [romantic_rejection ?rejector ?rejected]:
    [Knows ?rejector [CrushOn ?rejected ?rejector]]
    [UnrequitedLove ?rejected ?rejector]
[end]

PlotPoint [fight ?attacker ?defender [triangle ?attacker ?defender ?loveInterest]]:
    [LoveTriangle ?attacker ?defender ?loveInterest]
[end]

PlotPoint [fight ?cheatee ?cheater [cheating ?cheater ?cheatee ?other]]:
    [CheatingOnWith ?cheater ?cheatee ?other]
[end]

PlotPoint [fight ?cheatee ?other [cheating ?cheater ?cheatee ?other]]:
    [CheatingOnWith ?cheater ?cheatee ?other]
[end]

PlotPoint [breakup ?char1 ?char2]:
    [Dating ?char1 ?char2]
    [HadFightWith ?char1 ?char]
[end]

PlotPoint [smoldering_look ?a ?b ?club]:
    [MutualAttraction ?a ?b]
    [SameClub ?a ?b]
    [InClub ?a ?club]
    [InClub ?b ?club]
[end]

PlotPoint [star_crossed_lovers ?a ?aType ?b ?bType]:
    [StarCrossedLovers ?a ?aType ?b ?bType]
[end]

PlotPoint [support_from_friend ?supporter ?supportee [star_crossed_lovers ?supportee ?supporteeType ?crush ?crushType]]:
    [StarCrossedLovers ?supportee ?supporteeType ?crush ?crushType]
    [Friend ?supporter ?supportee]
[end]

# PlotPoint mutual friends
# two people become friends after having a common enemy
PlotPoint [mutual_friends ?charA ?charB ?mutualEnemy]:
    [Not [= ?charA ?charB]]
    [Enemy ?charA ?mutualEnemy]
    [Enemy ?charB ?mutualEnemy]
    [Not [Enemy ?charA ?charB]]
    [Not [Enemy ?charB ?charA]]
[end]

# PlotPoint random_encounter
# if two people do not have crushes on each other, they can encounter one another
PlotPoint [random_encounter ?charA ?charB]:
    [Not [Dating ?charA ?charB]]
    [Not [CrushOn ?charA ?charB]]
    [Not [CrushOn ?charB ?charA]]
[end]

[main]
[randomly]
task ExecutePlotPoint ?event.
# Generate text to describe the specified plot point. Fill in methods
# for this, below.

###
### Place your code below
###
ExecutePlotPoint [confess_love ?confessor ?confessee]:
    ?confesee now knows that ?confessor has a crush on ?confessee.
    [now [Knows ?confesee [CrushOn ?confessor ?confesee]]]
[end]

ExecutePlotPoint [start_dating ?a ?b]:
    ?a and ?b are now dating. ?a forgets about ?b's crush on ?a.
    [now [DatingHelper ?a ?b]]
    [now [Not [Knows ?a [CrushOn ?b ?a]]]]
[end]

ExecutePlotPoint [romantic_rejection ?rejector ?rejected]:
    ?rejector forgets about ?rejected's crush. ?rejected no longer crushes on ?rejector. ?rejected consideres ?rejector to be an enemy.
    [now [Not [Knows ?rejector [CrushOn ?rejected ?rejector]]]]
    [now [Not [CrushOn ?rejected ?rejector]]]
    [now [Enemy ?rejected ?rejector]]
[end]

ExecutePlotPoint [fight ?attacker ?defender [triangle ?attacker ?defender ?loveInterest]]:
    ?attacker fights ?defender over their contested love, ?loveInterest.
    [now [HadFightWithHelper ?attacker ?defender]]
[end]

ExecutePlotPoint [fight ?cheatee ?other [cheating ?cheater ?cheatee ?other]]:
    ?cheatee fights ?other over being in love with ?cheater.
    [now [HadFightWithHelper ?cheatee ?other]]
[end]

ExecutePlotPoint [fight ?cheatee ?cheater [cheating ?cheater ?cheatee ?other]]:
    ?cheatee fights ?cheater over cheating on them with ?other.
    [now [HadFightWithHelper ?cheatee ?cheater]]
[end]

ExecutePlotPoint [breakup ?char1 ?char2]:
    ?char1 and ?char2 breakup.
    [now [Not [DatingHelper ?char1 ?char2]]]
    [now [Not [DatingHelper ?char2 ?char1]]]
    [now [Not [HadFightWithHelper ?char1 char2]]]
    [now [Not [HadFightWithHelper ?char2 char1]]]
    [now [Not [CrushOn ?char1 ?char2]]]
    [now [Not [CrushOn ?char2 ?char1]]]
[end]

ExecutePlotPoint [smoldering_look ?a ?b ?club]:
    ?a and ?b exchange a smouldering look while at ?club.
[end]

ExecutePlotPoint [star_crossed_lovers ?a ?aType ?b ?bType]:
    Even though ?aType and ?bType don't mix, ?a and ?b have become star crossed lovers.
[end]

ExecutePlotPoint [support_from_friend ?supporter ?supportee [star_crossed_lovers ?supportee ?supporteeType ?crush ?crushType]]:
    ?supporter cheers on ?supportee to go forth without fear!
    [now [Confident ?supportee]]
[end]

ExecutePlotPoint [mutual_friends ?charA ?charB ?mutualEnemy]:
    ?charA and ?charB team up and become friends from their collective distaste for ?mutualEnemy.
    [now [FriendHelper ?charA ?charB]]
[end]

ExecutePlotPoint [random_encounter ?charA ?charB]:
    One day, ?charA and ?charB run into each other and develop a liking for one another.
    [now [CrushOn ?charA ?charB]]
    [now [CrushOn ?charB ?charA]]
[end]

ExecutePlotPoint [random_encounter ?charA ?charB]:
    One day, ?charA and ?charB run into each other. ?charB takes a liking to ?charA/Possessive
    [now [CrushOn ?charB ?charA]]
[end]